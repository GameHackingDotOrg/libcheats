{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"libcheats","tagline":"Portable C library to read, manipulate, and write cheat codes in text format","body":"libcheats\r\n=========\r\n\r\nlibcheats is a portable C library to read, manipulate, and write cheat codes in\r\ntext format.\r\n\r\nThe format is quite simple:\r\n\r\n    \"Game title 1\"\r\n    Cheat description 1\r\n    Cheat code 1\r\n    Cheat code 2\r\n    Cheat description 2\r\n    Cheat code 1\r\n    Cheat code 2\r\n\r\n    \"Game title 2\"\r\n    etc.\r\n\r\nAlso, C++-style comments are allowed; all text beginning with a `//` sequence to\r\nthe end of the line is ignored.\r\n\r\nExample:\r\n\r\n    \"TimeSplitters\"\r\n    // some senseless comment\r\n    Mastercode\r\n    902D51F8 0C0B95F6\r\n    Invincible\r\n    203C8728 00000001\r\n\r\nAlthough libcheats is quite generic, the current version expects one code line\r\nto be two 32-bit words. Therefore, you can only use it for systems like the PS2.\r\nWithout this size limitation, I hope that libcheats will someday become a standard\r\nlibrary when it comes to cheat code parsing/processing.\r\n\r\n\r\nBuild\r\n-----\r\n\r\nTo compile libcheats, you need CMake and a C compiler like gcc.\r\n\r\nI recommend doing an out-of-source build:\r\n\r\n    $ mkdir build\r\n    $ cd build\r\n    $ cmake ..\r\n    $ make\r\n\r\nTo install libcheats:\r\n\r\n    # make install\r\n\r\n\r\nUsage\r\n-----\r\n\r\nSimply link the library to your project and include the header files.\r\n\r\nTake a look at the source files in the test directory for working samples.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nlibcheats is licensed under the terms of the MIT License. See LICENSE file.\r\n\r\n\r\nContact\r\n-------\r\n\r\n* Web: <http://mlafeldt.github.com/libcheats>\r\n* Mail: <mathias.lafeldt@gmail.com>\r\n* Twitter: [@mlafeldt](https://twitter.com/mlafeldt)\r\n"}